#pragma version 10

// This TEAL was generated by TEALScript v0.93.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
//
// Initial setup
createApplication:
	proto 0 0

	// contracts\BiatecLearn.algo.ts:37
	// this.version.value = 'BIATEC-EARN-01-01-01'
	byte 0x7363766572 // "scver"
	byte 0x00144249415445432d4541524e2d30312d30312d3031
	app_global_put
	retsub

// updateApplication(string)void
*abi_route_updateApplication:
	// version: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateApplication(string)void
	callsub updateApplication
	int 1
	return

// updateApplication(version: string): void
//
// Creator can update application
updateApplication:
	proto 1 0

	// contracts\BiatecLearn.algo.ts:44
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\BiatecLearn.algo.ts:45
	// this.version.value = version
	byte 0x7363766572 // "scver"
	frame_dig -1 // version: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// setupQuestion(txn,byte[32],(uint64,uint64,uint64,uint64,string,string,string,string,string,string,string))void
*abi_route_setupQuestion:
	// question: (uint64,uint64,uint64,uint64,string,string,string,string,string,string,string)
	txna ApplicationArgs 2

	// id: byte[32]
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (id) for setupQuestion must be a byte[32]
	assert

	// deposit: txn
	txn GroupIndex
	int 1
	-

	// execute setupQuestion(txn,byte[32],(uint64,uint64,uint64,uint64,string,string,string,string,string,string,string))void
	callsub setupQuestion
	int 1
	return

// setupQuestion(deposit: Txn, id: bytes32, question: Question): void
//
// Setup the question
//
// @param deposit Deposit txn
// @param id Hash of the ID
// @param question Question to answer
setupQuestion:
	proto 3 0

	// *if0_condition
	// contracts\BiatecLearn.algo.ts:56
	// question.assetId === 0
	frame_dig -3 // question: Question
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	int 0
	==
	bz *if0_else

	// *if0_consequent
	// contracts\BiatecLearn.algo.ts:57
	// assert(deposit.receiver === globals.currentApplicationAddress, 'Receiver must be the smart contract address')
	frame_dig -1 // deposit: Txn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// Receiver must be the smart contract address
	assert

	// contracts\BiatecLearn.algo.ts:58
	// assert(question.count * question.reward === deposit.amount, 'Amount does not match question')
	frame_dig -3 // question: Question
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	frame_dig -3 // question: Question
	store 255 // full array
	load 255 // full array
	extract 16 8
	btoi
	*
	frame_dig -1 // deposit: Txn
	gtxns Amount
	==

	// Amount does not match question
	assert
	b *if0_end

*if0_else:
	// contracts\BiatecLearn.algo.ts:60
	// assert(
	//         deposit.assetReceiver === globals.currentApplicationAddress,
	//         'Receiver must be the smart contract address'
	//       )
	frame_dig -1 // deposit: Txn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// Receiver must be the smart contract address
	assert

	// contracts\BiatecLearn.algo.ts:64
	// assert(question.assetId === deposit.xferAsset.id, 'assetId does not match question setup')
	frame_dig -3 // question: Question
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_dig -1 // deposit: Txn
	gtxns XferAsset
	==

	// assetId does not match question setup
	assert

	// contracts\BiatecLearn.algo.ts:65
	// assert(question.count * question.reward === deposit.amount, 'Asset amount does not match question')
	frame_dig -3 // question: Question
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	frame_dig -3 // question: Question
	store 255 // full array
	load 255 // full array
	extract 16 8
	btoi
	*
	frame_dig -1 // deposit: Txn
	gtxns Amount
	==

	// Asset amount does not match question
	assert

*if0_end:
	// contracts\BiatecLearn.algo.ts:68
	// assert(!this.questions(id).exists, 'Question already exists')
	byte 0x71 // "q"
	frame_dig -2 // id: bytes32
	concat
	box_len
	swap
	pop
	!

	// Question already exists
	assert

	// contracts\BiatecLearn.algo.ts:70
	// this.questions(id).value = question
	byte 0x71 // "q"
	frame_dig -2 // id: bytes32
	concat
	dup
	box_del
	pop
	frame_dig -3 // question: Question
	box_put
	retsub

// answerQuestion(string,uint64)void
*abi_route_answerQuestion:
	// answer: uint64
	txna ApplicationArgs 2
	btoi

	// id: string
	txna ApplicationArgs 1
	extract 2 0

	// execute answerQuestion(string,uint64)void
	callsub answerQuestion
	int 1
	return

// answerQuestion(id: string, answer: uint64): void
//
// Setup the question
//
// @param id ID of the question. The hash (sha512_256) of the ID is the key in the box.
// @param answer Answer to the question
answerQuestion:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// contracts\BiatecLearn.algo.ts:80
	// hash = sha512_256(id)
	frame_dig -1 // id: string
	sha512_256
	frame_bury 0 // hash: byte[32]

	// contracts\BiatecLearn.algo.ts:81
	// assert(this.questions(hash).exists, 'Question was not found')
	byte 0x71 // "q"
	frame_dig 0 // hash: byte[32]
	concat
	box_len
	swap
	pop

	// Question was not found
	assert

	// contracts\BiatecLearn.algo.ts:82
	// qBox = this.questions(hash).value
	byte 0x71 // "q"
	frame_dig 0 // hash: byte[32]
	concat
	frame_bury 1 // storage key//qBox

	// contracts\BiatecLearn.algo.ts:83
	// assetId = qBox.assetId
	frame_dig 1 // storage key//qBox
	box_get

	// box value does not exist: this.questions(hash).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_bury 2 // assetId: uint64

	// contracts\BiatecLearn.algo.ts:84
	// reward = qBox.reward
	frame_dig 1 // storage key//qBox
	box_get

	// box value does not exist: this.questions(hash).value
	assert
	store 255 // full array
	load 255 // full array
	extract 16 8
	btoi
	frame_bury 3 // reward: uint64

	// contracts\BiatecLearn.algo.ts:85
	// count = qBox.count
	frame_dig 1 // storage key//qBox
	box_get

	// box value does not exist: this.questions(hash).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	frame_bury 4 // count: uint64

	// contracts\BiatecLearn.algo.ts:86
	// assert(qBox.index === answer)
	frame_dig 1 // storage key//qBox
	box_get

	// box value does not exist: this.questions(hash).value
	assert
	store 255 // full array
	load 255 // full array
	extract 24 8
	btoi
	frame_dig -2 // answer: uint64
	==
	assert

	// contracts\BiatecLearn.algo.ts:87
	// assert(qBox.count > 0, 'This question has been already claimed maximum times')
	frame_dig 1 // storage key//qBox
	box_get

	// box value does not exist: this.questions(hash).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	int 0
	>

	// This question has been already claimed maximum times
	assert

	// contracts\BiatecLearn.algo.ts:88
	// qBox.count = count - 1
	frame_dig 1 // storage key//qBox
	box_get

	// box value does not exist: this.questions(hash).value
	assert
	store 255 // full array
	load 255 // full array
	int 8
	frame_dig 4 // count: uint64
	int 1
	-
	itob
	replace3
	frame_dig 1 // storage key//qBox
	dup
	box_del
	pop
	swap
	box_put

	// contracts\BiatecLearn.algo.ts:90
	// assert(!this.answers(this.txn.sender).exists, 'You have already answered this question')
	byte 0x61 // "a"
	txn Sender
	concat
	box_len
	swap
	pop
	!

	// You have already answered this question
	assert

	// contracts\BiatecLearn.algo.ts:91
	// this.answers(this.txn.sender).value = 1
	byte 0x61 // "a"
	txn Sender
	concat
	byte 0x0000000000000001
	box_put

	// *if1_condition
	// contracts\BiatecLearn.algo.ts:92
	// assetId === 0
	frame_dig 2 // assetId: uint64
	int 0
	==
	bz *if1_else

	// *if1_consequent
	// contracts\BiatecLearn.algo.ts:93
	// sendPayment({
	//         amount: reward,
	//         receiver: this.txn.sender,
	//         note: id,
	//         fee: 2000, // we pay fee for user as well so that he can receive initial algo deposit
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts\BiatecLearn.algo.ts:94
	// amount: reward
	frame_dig 3 // reward: uint64
	itxn_field Amount

	// contracts\BiatecLearn.algo.ts:95
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts\BiatecLearn.algo.ts:96
	// note: id
	frame_dig -1 // id: string
	itxn_field Note

	// contracts\BiatecLearn.algo.ts:97
	// fee: 2000
	int 2000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if1_end

*if1_else:
	// contracts\BiatecLearn.algo.ts:100
	// sendAssetTransfer({
	//         assetAmount: reward,
	//         assetReceiver: this.txn.sender,
	//         xferAsset: AssetID.fromUint64(assetId),
	//         note: id,
	//         fee: 2000, // we pay fee for user as well so that he can receive initial algo deposit
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\BiatecLearn.algo.ts:101
	// assetAmount: reward
	frame_dig 3 // reward: uint64
	itxn_field AssetAmount

	// contracts\BiatecLearn.algo.ts:102
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts\BiatecLearn.algo.ts:103
	// xferAsset: AssetID.fromUint64(assetId)
	frame_dig 2 // assetId: uint64
	itxn_field XferAsset

	// contracts\BiatecLearn.algo.ts:104
	// note: id
	frame_dig -1 // id: string
	itxn_field Note

	// contracts\BiatecLearn.algo.ts:105
	// fee: 2000
	int 2000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if1_end:
	retsub

// payment(uint64,address,string)void
*abi_route_payment:
	// note: string
	txna ApplicationArgs 3
	extract 2 0

	// receiver: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 1 (receiver) for payment must be a address
	assert

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute payment(uint64,address,string)void
	callsub payment
	int 1
	return

// payment(amount: uint64, receiver: Address, note: string): void
//
// Creator can send pay/axfer transaction out of the smart contract
//
// @param amount Amount
// @param note Note
// @param receiver Receiver
payment:
	proto 3 0

	// contracts\BiatecLearn.algo.ts:118
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\BiatecLearn.algo.ts:119
	// sendPayment({
	//       amount: amount,
	//       receiver: receiver,
	//       note: note,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts\BiatecLearn.algo.ts:120
	// amount: amount
	frame_dig -1 // amount: uint64
	itxn_field Amount

	// contracts\BiatecLearn.algo.ts:121
	// receiver: receiver
	frame_dig -2 // receiver: Address
	itxn_field Receiver

	// contracts\BiatecLearn.algo.ts:122
	// note: note
	frame_dig -3 // note: string
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\BiatecLearn.algo.ts:124
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert
	retsub

// assetTransfer(uint64,uint64,address,string)void
*abi_route_assetTransfer:
	// note: string
	txna ApplicationArgs 4
	extract 2 0

	// assetReceiver: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==

	// argument 1 (assetReceiver) for assetTransfer must be a address
	assert

	// assetAmount: uint64
	txna ApplicationArgs 2
	btoi

	// xferAsset: uint64
	txna ApplicationArgs 1
	btoi

	// execute assetTransfer(uint64,uint64,address,string)void
	callsub assetTransfer
	int 1
	return

// assetTransfer(xferAsset: AssetID, assetAmount: uint64, assetReceiver: Address, note: string): void
//
// Creator can send pay/axfer transaction out of the smart contract
// @param xferAsset Asset id
// @param assetAmount Amount
// @param note Note
// @param assetReceiver Receiver
assetTransfer:
	proto 4 0

	// contracts\BiatecLearn.algo.ts:135
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\BiatecLearn.algo.ts:136
	// sendAssetTransfer({
	//       assetAmount: assetAmount,
	//       assetReceiver: assetReceiver,
	//       xferAsset: xferAsset,
	//       note: note,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\BiatecLearn.algo.ts:137
	// assetAmount: assetAmount
	frame_dig -2 // assetAmount: uint64
	itxn_field AssetAmount

	// contracts\BiatecLearn.algo.ts:138
	// assetReceiver: assetReceiver
	frame_dig -3 // assetReceiver: Address
	itxn_field AssetReceiver

	// contracts\BiatecLearn.algo.ts:139
	// xferAsset: xferAsset
	frame_dig -1 // xferAsset: AssetID
	itxn_field XferAsset

	// contracts\BiatecLearn.algo.ts:140
	// note: note
	frame_dig -4 // note: string
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void
*abi_route_sendOnlineKeyRegistration:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// stateProofPk: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// selectionPk: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// votePk: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub sendOnlineKeyRegistration
	int 1
	return

// sendOnlineKeyRegistration(votePk: bytes, selectionPk: bytes, stateProofPk: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
//
// Creator can perfom key registration for this LP pool
sendOnlineKeyRegistration:
	proto 6 0

	// contracts\BiatecLearn.algo.ts:155
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\BiatecLearn.algo.ts:156
	// sendOnlineKeyRegistration({
	//       selectionPK: selectionPk,
	//       stateProofPK: stateProofPk,
	//       voteFirst: voteFirst,
	//       voteKeyDilution: voteKeyDilution,
	//       voteLast: voteLast,
	//       votePK: votePk,
	//       fee: 0,
	//     })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// contracts\BiatecLearn.algo.ts:157
	// selectionPK: selectionPk
	frame_dig -2 // selectionPk: bytes
	itxn_field SelectionPK

	// contracts\BiatecLearn.algo.ts:158
	// stateProofPK: stateProofPk
	frame_dig -3 // stateProofPk: bytes
	itxn_field StateProofPK

	// contracts\BiatecLearn.algo.ts:159
	// voteFirst: voteFirst
	frame_dig -4 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts\BiatecLearn.algo.ts:160
	// voteKeyDilution: voteKeyDilution
	frame_dig -6 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// contracts\BiatecLearn.algo.ts:161
	// voteLast: voteLast
	frame_dig -5 // voteLast: uint64
	itxn_field VoteLast

	// contracts\BiatecLearn.algo.ts:162
	// votePK: votePk
	frame_dig -1 // votePk: bytes
	itxn_field VotePK

	// contracts\BiatecLearn.algo.ts:163
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// sendOfflineKeyRegistration()void
*abi_route_sendOfflineKeyRegistration:
	// execute sendOfflineKeyRegistration()void
	callsub sendOfflineKeyRegistration
	int 1
	return

// sendOfflineKeyRegistration(): void
//
// Creator can perfom key unregistration for this LP pool
sendOfflineKeyRegistration:
	proto 0 0

	// contracts\BiatecLearn.algo.ts:171
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts\BiatecLearn.algo.ts:172
	// sendOfflineKeyRegistration({ fee: 0 })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// contracts\BiatecLearn.algo.ts:172
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "setupQuestion(txn,byte[32],(uint64,uint64,uint64,uint64,string,string,string,string,string,string,string))void"
	method "answerQuestion(string,uint64)void"
	method "payment(uint64,address,string)void"
	method "assetTransfer(uint64,uint64,address,string)void"
	method "sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void"
	method "sendOfflineKeyRegistration()void"
	txna ApplicationArgs 0
	match *abi_route_setupQuestion *abi_route_answerQuestion *abi_route_payment *abi_route_assetTransfer *abi_route_sendOnlineKeyRegistration *abi_route_sendOfflineKeyRegistration

	// this contract does not implement the given ABI method for call NoOp
	err

*call_UpdateApplication:
	method "updateApplication(string)void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err